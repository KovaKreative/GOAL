generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                                             Int              @id @default(autoincrement())
  username                                       String           @unique @db.VarChar
  email                                          String           @unique @db.VarChar
  password                                       String?          @db.VarChar
  created_at                                     DateTime?        @default(now()) @db.Timestamp(6)
  buddy_availability                             Boolean?         @default(true)
  buddy_id                                       Int?
  is_deleted                                     Boolean?         @default(false)
  buddy_requests_buddy_requests_from_userTousers buddy_requests[] @relation("buddy_requests_from_userTousers")
  buddy_requests_buddy_requests_to_userTousers   buddy_requests[] @relation("buddy_requests_to_userTousers")
  interests                                      interests[]
  main_goals                                     main_goals[]
  messages_messages_receiver_idTousers           messages[]       @relation("messages_receiver_idTousers")
  messages_messages_sender_idTousers             messages[]       @relation("messages_sender_idTousers")
  users                                          users?           @relation("usersTousers", fields: [buddy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_users                                    users[]          @relation("usersTousers")
}

model buddy_requests {
  id                                    Int       @id @default(autoincrement())
  from_user                             Int
  to_user                               Int
  request_message                       String?   @db.VarChar
  is_deleted                            Boolean?  @default(false)
  created_at                            DateTime? @default(now()) @db.Timestamp(6)
  users_buddy_requests_from_userTousers users?    @relation("buddy_requests_from_userTousers", fields: [from_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_buddy_requests_to_userTousers   users?    @relation("buddy_requests_to_userTousers", fields: [to_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model messages {
  id                                Int       @id @default(autoincrement())
  sender_id                         Int?
  receiver_id                       Int?
  content                           String?   @db.VarChar
  created_at                        DateTime? @default(now()) @db.Timestamp(6)
  is_deleted                        Boolean?  @default(false)
  users_messages_receiver_idTousers users?    @relation("messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_messages_sender_idTousers   users?    @relation("messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model categories {
  id         Int          @id @default(autoincrement())
  name       String?      @unique @db.VarChar
  interests  interests[]
  main_goals main_goals[]
}

model interests {
  id          Int         @id @default(autoincrement())
  user_id     Int
  category_id Int
  categories  categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@unique(fields: [user_id, category_id], name: "userCategory")
}

model main_goals {
  id           Int         @id @default(autoincrement())
  title        String?     @db.VarChar
  note         String?
  user_id      Int?
  category_id  Int?
  due_date     DateTime?   @db.Date
  completed_on DateTime?   @db.Date
  is_deleted   Boolean?    @default(false)
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  categories   categories? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sub_goals    sub_goals[]
}

model sub_goals {
  id                                                       Int                 @id @default(autoincrement())
  main_goal_id                                             Int
  title                                                    String?             @db.VarChar
  note                                                     String?
  priority                                                 Int?
  due_date                                                 DateTime?           @db.Date
  completed_on                                             DateTime?           @db.Date
  is_deleted                                               Boolean?            @default(false)
  created_at                                               DateTime?           @default(now()) @db.Timestamp(6)
  updated_at                                               DateTime?           @default(now()) @db.Timestamp(6)
  goal_relationship_goal_relationship_child_idTosub_goals  goal_relationship[] @relation("goal_relationship_child_idTosub_goals")
  goal_relationship_goal_relationship_parent_idTosub_goals goal_relationship[] @relation("goal_relationship_parent_idTosub_goals")
  main_goals                                               main_goals          @relation(fields: [main_goal_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model goal_relationship {
  id                                               Int         @id @default(autoincrement())
  parent_id                                        Int
  child_id                                         Int         @unique
  sub_goals_goal_relationship_child_idTosub_goals  sub_goals @relation("goal_relationship_child_idTosub_goals", fields: [child_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sub_goals_goal_relationship_parent_idTosub_goals sub_goals @relation("goal_relationship_parent_idTosub_goals", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
